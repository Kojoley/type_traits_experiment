#==============================================================================
#   Copyright (c) 2016-2019 Nikita Kniazev
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

language: cpp

sudo: false

addon_shortcuts:
  clang-7: &clang-7
    apt:
      sources:
        - llvm-toolchain-xenial-7
      packages:
        - clang-7
        - libc++-7-dev
        - libc++abi-7-dev

  gcc-8: &gcc-8
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-8

os: linux
dist: xenial

env:
  global:
    - BRANCH=develop
    - BOOST_ROOT=$HOME/boost
    - BOOST_BUILD_PATH=$HOME/build-boost
    - STD=11

matrix:
  include:
    - { env: 'PROJECT=bimap', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=container', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=geometry', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=hana', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=hof', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=interprocess', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=intrusive', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=metaparse', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=move', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=mpi', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=mpl', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=msm', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=multiprecision', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=property_map', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=proto', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=python', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=range', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=serialization', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=signals', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=signals2', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=spirit', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=statechart', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=type_traits', compiler: gcc-8, addons: *gcc-8 }

cache: ccache

before_install:
  - export CACHE_NAME=$TRAVIS_OS_NAME-$TOOLSET-$STD-$JOB
  - export PATH=$BOOST_ROOT:$PATH
  - if [[ "$TRAVIS_COMPILER" =~ ^clang- ]]; then export STDLIB=stdlib=libc++ ; fi
  - |
    # Creating ~/user-config.jam file
    sed 's/^  //' > ~/user-config.jam << 'EOF'

    import common ;
    import feature ;
    import os ;
    import regex ;
    import toolset ;


    # Ccache
    local CCACHE = [ common.find-tool ccache ] ;
    local TOOLSET = [ os.environ TRAVIS_COMPILER ] ;
    local toolset-parts = [ regex.split $(TOOLSET) "-" ] ;
    local toolset-name = $(toolset-parts[1]) ;
    local toolset-feature = $(toolset-parts[2-]:J="-") ;

    local cxx ;
    switch $(toolset-name) {
        case gcc   : cxx ?= [ regex.replace $(TOOLSET) "gcc" "g++" ] ;
        case clang : cxx ?= [ regex.replace $(TOOLSET) "clang" "clang++" ] ;
        case *     : EXIT "user-config: Unsupported toolset $(toolset-name)" ;
    }

    using $(toolset-name) : $(toolset-feature) : $(CCACHE) $(cxx) ;


    # Extend stdlib with libc++
    feature.extend stdlib : libc++ ;
    feature.compose <stdlib>libc++ : <cxxflags>-stdlib=libc++ <linkflags>-stdlib=libc++ ;


    # Ignore some warnings
    feature.feature known-warnings : suppress : optional incidental propagated ;
    toolset.flags gcc.compile OPTIONS <known-warnings>suppress :
        -Wno-maybe-uninitialized  # this warning is known to give false positives
        -Wno-sign-compare
      : unchecked ;
    toolset.flags clang-linux.compile OPTIONS <known-warnings>suppress :
        -Wno-unused-command-line-argument # Sometimes it barks on -I and -stdlib
      : unchecked ;

  # Checkout Boost
  - git clone -b $BRANCH --depth 1 https://github.com/boostorg/boost.git $BOOST_ROOT
  - pushd $BOOST_ROOT
  - git submodule update --init --
      tools/boost_install
      libs/headers
      tools/build
      libs/config
      tools/boostdep
  - python tools/boostdep/depinst/depinst.py $PROJECT

  # apply random unused parameter warnings patch
  - pushd libs/type_traits
  - PATCH_URL=https://github.com/boostorg/type_traits/pull/134.patch;
    curl -sL $PATCH_URL | patch -sup 1
  - popd

  # Remove the empty folder
  - rm -rf libs/$PROJECT
  - ./bootstrap.sh --with-toolset=clang --with-libraries=$TEST_LINK_DEPS
    || ( echo === bootstrap.log === ; cat bootstrap.log ; exit 1 ; )
  - ./b2 headers
  - ./b2 -j`nproc` link=shared threading=multi variant=release
      toolset=$TRAVIS_COMPILER cxxstd=${STD#*,} $STDLIB
      warnings=off

  # Move the repository to boost/libs and make a link to previous place
  - mv $TRAVIS_BUILD_DIR libs/$PROJECT
  - ln -s libs/$PROJECT $TRAVIS_BUILD_DIR

  - cd libs/$PROJECT/test

script:
  - b2 -j`nproc` link=shared threading=multi variant=release
      toolset=$TRAVIS_COMPILER cxxstd=$STD $STDLIB
      warnings=on known-warnings=suppress warnings-as-errors=on

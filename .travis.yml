#==============================================================================
#   Copyright (c) 2016-2019 Nikita Kniazev
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

language: cpp

sudo: false

addon_shortcuts:
  clang-7: &clang-7
    apt:
      sources:
        - llvm-toolchain-xenial-7
      packages:
        - clang-7
        - libc++-7-dev
        - libc++abi-7-dev

  gcc-8: &gcc-8
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-8

os: linux
dist: xenial

env:
  global:
    - BRANCH=develop
    - BOOST_ROOT=$HOME/boost
    - BOOST_BUILD_PATH=$HOME/build-boost
    - STD=11

matrix:
  include:
    - { env: 'PROJECT=bimap', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=container', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=geometry', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=hana', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=hof', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=interprocess', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=intrusive', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=metaparse', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=move', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=mpi', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=mpl', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=msm', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=multiprecision', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=property_map', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=proto', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=python', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=range', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=serialization', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=signals', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=signals2', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=spirit', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=statechart', compiler: gcc-8, addons: *gcc-8 }
    - { env: 'PROJECT=type_traits', compiler: gcc-8, addons: *gcc-8 }

cache: ccache

before_install:
  - export PATH=$BOOST_ROOT:$PATH

  # Checkout Boost
  - git clone -b $BRANCH --depth 1 https://github.com/boostorg/boost.git $BOOST_ROOT
  - pushd $BOOST_ROOT
  - git submodule update --init --
      tools/boost_install
      libs/headers
      tools/build
      libs/config
      tools/boostdep
  - python tools/boostdep/depinst/depinst.py $PROJECT

  # apply random unused parameter warnings patch
  - pushd libs/type_traits
  - PATCH_URL=https://github.com/boostorg/type_traits/pull/134.patch;
    curl -sL $PATCH_URL | patch -sup 1
  - popd

  # Remove the empty folder
  - rm -rf libs/$PROJECT
  - ./bootstrap.sh --with-toolset=clang
    || ( echo === bootstrap.log === ; cat bootstrap.log ; exit 1 ; )
  - ./b2 headers

  # Move the repository to boost/libs and make a link to previous place
  - mv $TRAVIS_BUILD_DIR libs/$PROJECT
  - ln -s libs/$PROJECT $TRAVIS_BUILD_DIR

  - cd libs/$PROJECT/test

script:
  - b2 -j`nproc` link=shared threading=multi variant=release
      toolset=$TRAVIS_COMPILER cxxstd=$STD
